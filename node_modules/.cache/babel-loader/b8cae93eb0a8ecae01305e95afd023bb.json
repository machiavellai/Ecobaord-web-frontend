{"ast":null,"code":"var _jsxFileName = \"/Users/machiavelli/Desktop/hrms-project-frontend/src/pages/CompanyStaff/Update/CompanyStaffUpdate.jsx\",\n    _s = $RefreshSig$();\n\nimport * as Yup from \"yup\";\nimport { Form, Formik } from \"formik\";\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport CompanyStaffService from \"../../../services/companyStaffService\";\nimport DisplayHeader from \"../../../components/DisplayHeader/DisplayHeader\";\nimport FormInput from \"../../../components/FormInput/FormInput\";\nimport LoadingSpinner from \"../../../components/LoadingSpinner/LoadingSpinner\";\nimport { toast } from \"react-toastify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CompanyStaffUpdate() {\n  _s();\n\n  const [companyStaff, setCompanyStaff] = useState(null);\n\n  const companyStaffService = useMemo(() => new CompanyStaffService(), []),\n        getById = useCallback(async () => {\n    const user = {\n      id: 3\n    },\n          //TODO Login Redux\n    result = await companyStaffService.getById(user.id);\n    if (result.data.success) setCompanyStaff(result.data.data);\n  }, [companyStaffService]),\n        updateByUser = async values => {\n    const updatedCompanyStaff = {\n      id: companyStaff.id,\n      ...values\n    },\n          result = await companyStaffService.updateByUser(updatedCompanyStaff);\n\n    if (result.data.success) {\n      toast.success(result.data.message);\n      setCompanyStaff(updatedCompanyStaff);\n    }\n  };\n\n  useEffect(() => {\n    getById();\n  }, [getById]);\n  const initialValues = {\n    password: \"\"\n  },\n        validationSchema = Yup.object().shape({\n    firstName: Yup.string().required(),\n    lastName: Yup.string().required(),\n    password: Yup.string().required()\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(DisplayHeader, {\n      firstText: \"Edit\",\n      secondText: \"Employer Information\",\n      size: \"5\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), companyStaff ? /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        firstName: companyStaff.firstName,\n        lastName: companyStaff.lastName,\n        ...initialValues\n      },\n      validationSchema: validationSchema,\n      onSubmit: values => updateByUser(values),\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(FormInput, {\n          name: \"firstName\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n          name: \"lastName\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n          type: \"password\",\n          name: \"password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-primary w-100 mt-3\",\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CompanyStaffUpdate, \"NZjVSZJbGtpMcE2SlxBM1rtjKhs=\");\n\n_c = CompanyStaffUpdate;\n\nvar _c;\n\n$RefreshReg$(_c, \"CompanyStaffUpdate\");","map":{"version":3,"sources":["/Users/machiavelli/Desktop/hrms-project-frontend/src/pages/CompanyStaff/Update/CompanyStaffUpdate.jsx"],"names":["Yup","Form","Formik","React","useCallback","useEffect","useMemo","useState","CompanyStaffService","DisplayHeader","FormInput","LoadingSpinner","toast","CompanyStaffUpdate","companyStaff","setCompanyStaff","companyStaffService","getById","user","id","result","data","success","updateByUser","values","updatedCompanyStaff","message","initialValues","password","validationSchema","object","shape","firstName","string","required","lastName"],"mappings":"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","sourcesContent":["import * as Yup from \"yup\";\n\nimport { Form, Formik } from \"formik\";\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\n\nimport CompanyStaffService from \"../../../services/companyStaffService\";\nimport DisplayHeader from \"../../../components/DisplayHeader/DisplayHeader\";\nimport FormInput from \"../../../components/FormInput/FormInput\";\nimport LoadingSpinner from \"../../../components/LoadingSpinner/LoadingSpinner\";\nimport { toast } from \"react-toastify\";\n\nexport default function CompanyStaffUpdate() {\n  const [companyStaff, setCompanyStaff] = useState(null);\n\n  const companyStaffService = useMemo(() => new CompanyStaffService(), []),\n    getById = useCallback(async () => {\n      const user = { id: 3 }, //TODO Login Redux\n        result = await companyStaffService.getById(user.id);\n      if (result.data.success) setCompanyStaff(result.data.data);\n    }, [companyStaffService]),\n    updateByUser = async (values) => {\n      const updatedCompanyStaff = {\n          id: companyStaff.id,\n          ...values,\n        },\n        result = await companyStaffService.updateByUser(updatedCompanyStaff);\n\n      if (result.data.success) {\n        toast.success(result.data.message);\n        setCompanyStaff(updatedCompanyStaff);\n      }\n    };\n\n  useEffect(() => {\n    getById();\n  }, [getById]);\n\n  const initialValues = {\n      password: \"\",\n    },\n    validationSchema = Yup.object().shape({\n      firstName: Yup.string().required(),\n      lastName: Yup.string().required(),\n      password: Yup.string().required(),\n    });\n\n  return (\n    <div className='container'>\n      <DisplayHeader firstText='Edit' secondText='Employer Information' size='5' />\n      {companyStaff ? (\n        <Formik\n          initialValues={{\n            firstName: companyStaff.firstName,\n            lastName: companyStaff.lastName,\n            ...initialValues,\n          }}\n          validationSchema={validationSchema}\n          onSubmit={(values) => updateByUser(values)}\n        >\n          <Form>\n            <FormInput name='firstName' />\n            <FormInput name='lastName' />\n            <FormInput type='password' name='password' />\n            <button type='submit' className='btn btn-primary w-100 mt-3'>\n              Save\n            </button>\n          </Form>\n        </Formik>\n      ) : (\n        <LoadingSpinner />\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}