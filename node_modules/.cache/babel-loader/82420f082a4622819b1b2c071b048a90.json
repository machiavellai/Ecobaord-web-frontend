{"ast":null,"code":"import { getter } from 'property-expr';\nconst prefixes = {\n  context: '$',\n  value: '.'\n};\nexport function create(key, options) {\n  return new Reference(key, options);\n}\nexport default class Reference {\n  constructor(key) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (typeof key !== 'string') throw new TypeError('ref must be a string, got: ' + key);\n    this.key = key.trim();\n    if (key === '') throw new TypeError('ref must be a non-empty string');\n    this.isContext = this.key[0] === prefixes.context;\n    this.isValue = this.key[0] === prefixes.value;\n    this.isSibling = !this.isContext && !this.isValue;\n    let prefix = this.isContext ? prefixes.context : this.isValue ? prefixes.value : '';\n    this.path = this.key.slice(prefix.length);\n    this.getter = this.path && getter(this.path, true);\n    this.map = options.map;\n  }\n  getValue(value, parent, context) {\n    let result = this.isContext ? context : this.isValue ? value : parent;\n    if (this.getter) result = this.getter(result || {});\n    if (this.map) result = this.map(result);\n    return result;\n  }\n  /**\n   *\n   * @param {*} value\n   * @param {Object} options\n   * @param {Object=} options.context\n   * @param {Object=} options.parent\n   */\n\n  cast(value, options) {\n    return this.getValue(value, options == null ? void 0 : options.parent, options == null ? void 0 : options.context);\n  }\n  resolve() {\n    return this;\n  }\n  describe() {\n    return {\n      type: 'ref',\n      key: this.key\n    };\n  }\n  toString() {\n    return `Ref(${this.key})`;\n  }\n  static isRef(value) {\n    return value && value.__isYupRef;\n  }\n} // @ts-ignore\n\nReference.prototype.__isYupRef = true;","map":{"version":3,"names":["getter","prefixes","context","value","create","key","options","Reference","constructor","arguments","length","undefined","TypeError","trim","isContext","isValue","isSibling","prefix","path","slice","map","getValue","parent","result","cast","resolve","describe","type","toString","isRef","__isYupRef","prototype"],"sources":["/Users/machiavelli/Desktop/hrms-project-frontend/node_modules/yup/es/Reference.js"],"sourcesContent":["import { getter } from 'property-expr';\nconst prefixes = {\n  context: '$',\n  value: '.'\n};\nexport function create(key, options) {\n  return new Reference(key, options);\n}\nexport default class Reference {\n  constructor(key, options = {}) {\n    if (typeof key !== 'string') throw new TypeError('ref must be a string, got: ' + key);\n    this.key = key.trim();\n    if (key === '') throw new TypeError('ref must be a non-empty string');\n    this.isContext = this.key[0] === prefixes.context;\n    this.isValue = this.key[0] === prefixes.value;\n    this.isSibling = !this.isContext && !this.isValue;\n    let prefix = this.isContext ? prefixes.context : this.isValue ? prefixes.value : '';\n    this.path = this.key.slice(prefix.length);\n    this.getter = this.path && getter(this.path, true);\n    this.map = options.map;\n  }\n\n  getValue(value, parent, context) {\n    let result = this.isContext ? context : this.isValue ? value : parent;\n    if (this.getter) result = this.getter(result || {});\n    if (this.map) result = this.map(result);\n    return result;\n  }\n  /**\n   *\n   * @param {*} value\n   * @param {Object} options\n   * @param {Object=} options.context\n   * @param {Object=} options.parent\n   */\n\n\n  cast(value, options) {\n    return this.getValue(value, options == null ? void 0 : options.parent, options == null ? void 0 : options.context);\n  }\n\n  resolve() {\n    return this;\n  }\n\n  describe() {\n    return {\n      type: 'ref',\n      key: this.key\n    };\n  }\n\n  toString() {\n    return `Ref(${this.key})`;\n  }\n\n  static isRef(value) {\n    return value && value.__isYupRef;\n  }\n\n} // @ts-ignore\n\nReference.prototype.__isYupRef = true;"],"mappings":"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"},"metadata":{},"sourceType":"module"}