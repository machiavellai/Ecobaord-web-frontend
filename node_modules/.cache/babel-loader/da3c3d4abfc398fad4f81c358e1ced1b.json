{"ast":null,"code":"import axios from \"axios\";\nexport default class JobAdvertService {\n  constructor() {\n    this.controllerUrl = `${process.env.REACT_APP_API_URL}/jobadverts`;\n  }\n\n  add({\n    applicationDeadline,\n    city,\n    description,\n    employer,\n    jobPosition,\n    workingTime,\n    workingType,\n    maxSalary,\n    minSalary,\n    numberOfOpenPositions\n  }) {\n    return axios.post(`${this.controllerUrl}`, {\n      applicationDeadline,\n      city,\n      description,\n      employer,\n      jobPosition,\n      maxSalary,\n      minSalary,\n      numberOfOpenPositions,\n      workingTime,\n      workingType\n    });\n  }\n\n  verifyById(id) {\n    return axios.put(`${this.controllerUrl}/verify/byid`, null, {\n      params: {\n        id\n      }\n    });\n  }\n\n  getAll() {\n    return axios.get(`${this.controllerUrl}/getall`);\n  }\n\n  getAllByIsActive(isActive, page, size, sortDirection, sortProperties) {\n    return axios.get(`${this.controllerUrl}/byisactive`, {\n      params: {\n        isActive,\n        page,\n        size,\n        sortDirection,\n        sortProperties\n      }\n    });\n  }\n\n  getAllByIsActiveForList(isActive, page, size, sortDirection, sortProperties) {\n    return axios.get(`${this.controllerUrl}/forlist/byisactive`, {\n      params: {\n        isActive,\n        page,\n        size,\n        sortDirection,\n        sortProperties\n      }\n    });\n  }\n\n  getAllByIsActiveAndEmployer_CompanyNameForList(companyName, isActive, page, size, sortDirection, sortProperties) {\n    return axios.get(`${this.controllerUrl}/forlist/byisactiveandemployercompanyname`, {\n      params: {\n        companyName,\n        isActive,\n        page,\n        size,\n        sortDirection,\n        sortProperties\n      }\n    });\n  }\n\n  getAllByIsActiveAndCityAndWorkingTimeForList(isActive, cityId, workingTimeId, page, size, sortDirection, sortProperties) {\n    return axios.get(`${this.controllerUrl}/forlist/byisactiveandcityandworkingtime`, {\n      params: {\n        cityId,\n        workingTimeId,\n        isActive,\n        page,\n        size,\n        sortDirection,\n        sortProperties\n      }\n    });\n  }\n\n  update({\n    id,\n    applicationDeadline,\n    city: {\n      cityId\n    },\n    description,\n    employer: {\n      employerId\n    },\n    jobPosition: {\n      jobPositionId\n    },\n    maxSalary,\n    minSalary,\n    numberOfOpenPositions\n  }) {\n    return axios.put(this.controllerUrl, {\n      id,\n      applicationDeadline,\n      city: {\n        id: cityId\n      },\n      description,\n      employer: {\n        id: employerId\n      },\n      jobPosition: {\n        id: jobPositionId\n      },\n      maxSalary,\n      minSalary,\n      numberOfOpenPositions\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/machiavelli/Desktop/hrms-project-frontend/src/services/jobAdvertService.js"],"names":["axios","JobAdvertService","controllerUrl","process","env","REACT_APP_API_URL","add","applicationDeadline","city","description","employer","jobPosition","workingTime","workingType","maxSalary","minSalary","numberOfOpenPositions","post","verifyById","id","put","params","getAll","get","getAllByIsActive","isActive","page","size","sortDirection","sortProperties","getAllByIsActiveForList","getAllByIsActiveAndEmployer_CompanyNameForList","companyName","getAllByIsActiveAndCityAndWorkingTimeForList","cityId","workingTimeId","update","employerId","jobPositionId"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n\nexport default class JobAdvertService {\n  controllerUrl = `${process.env.REACT_APP_API_URL}/jobadverts`;\n\n  add({\n    applicationDeadline,\n    city,\n    description,\n    employer,\n    jobPosition,\n    workingTime,\n    workingType,\n    maxSalary,\n    minSalary,\n    numberOfOpenPositions,\n  }) {\n    return axios.post(`${this.controllerUrl}`, {\n      applicationDeadline,\n      city,\n      description,\n      employer,\n      jobPosition,\n      maxSalary,\n      minSalary,\n      numberOfOpenPositions,\n      workingTime,\n      workingType,\n    });\n  }\n\n  verifyById(id) {\n    return axios.put(`${this.controllerUrl}/verify/byid`, null, {\n      params: { id },\n    });\n  }\n\n  getAll() {\n    return axios.get(`${this.controllerUrl}/getall`);\n  }\n\n  getAllByIsActive(isActive, page, size, sortDirection, sortProperties) {\n    return axios.get(`${this.controllerUrl}/byisactive`, {\n      params: {\n        isActive,\n        page,\n        size,\n        sortDirection,\n        sortProperties,\n      },\n    });\n  }\n\n  getAllByIsActiveForList(isActive, page, size, sortDirection, sortProperties) {\n    return axios.get(`${this.controllerUrl}/forlist/byisactive`, {\n      params: {\n        isActive,\n        page,\n        size,\n        sortDirection,\n        sortProperties,\n      },\n    });\n  }\n\n  getAllByIsActiveAndEmployer_CompanyNameForList(\n    companyName,\n    isActive,\n    page,\n    size,\n    sortDirection,\n    sortProperties\n  ) {\n    return axios.get(`${this.controllerUrl}/forlist/byisactiveandemployercompanyname`, {\n      params: {\n        companyName,\n        isActive,\n        page,\n        size,\n        sortDirection,\n        sortProperties,\n      },\n    });\n  }\n\n  getAllByIsActiveAndCityAndWorkingTimeForList(\n    isActive,\n    cityId,\n    workingTimeId,\n    page,\n    size,\n    sortDirection,\n    sortProperties\n  ) {\n    return axios.get(`${this.controllerUrl}/forlist/byisactiveandcityandworkingtime`, {\n      params: {\n        cityId,\n        workingTimeId,\n        isActive,\n        page,\n        size,\n        sortDirection,\n        sortProperties,\n      },\n    });\n  }\n\n  update({\n    id,\n    applicationDeadline,\n    city: { cityId },\n    description,\n    employer: { employerId },\n    jobPosition: { jobPositionId },\n    maxSalary,\n    minSalary,\n    numberOfOpenPositions,\n  }) {\n    return axios.put(this.controllerUrl, {\n      id,\n      applicationDeadline,\n      city: { id: cityId },\n      description,\n      employer: { id: employerId },\n      jobPosition: { id: jobPositionId },\n      maxSalary,\n      minSalary,\n      numberOfOpenPositions,\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}