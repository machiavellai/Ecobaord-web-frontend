{"ast":null,"code":"import axios from \"axios\";\nexport default class JobAdvertService {\n  constructor() {\n    this.controllerUrl = `${process.env.REACT_APP_API_URL}/jobadverts`;\n  }\n  add(_ref) {\n    let {\n      applicationDeadline,\n      city,\n      description,\n      employer,\n      jobPosition,\n      workingTime,\n      workingType,\n      maxSalary,\n      minSalary,\n      numberOfOpenPositions\n    } = _ref;\n    return axios.post(`${this.controllerUrl}`, {\n      applicationDeadline,\n      city,\n      description,\n      employer,\n      jobPosition,\n      maxSalary,\n      minSalary,\n      numberOfOpenPositions,\n      workingTime,\n      workingType\n    });\n  }\n  verifyById(id) {\n    return axios.put(`${this.controllerUrl}/verify/byid`, null, {\n      params: {\n        id\n      }\n    });\n  }\n  getAll() {\n    return axios.get(`${this.controllerUrl}/getall`);\n  }\n  getAllByIsActive(isActive, page, size, sortDirection, sortProperties) {\n    return axios.get(`${this.controllerUrl}/byisactive`, {\n      params: {\n        isActive,\n        page,\n        size,\n        sortDirection,\n        sortProperties\n      }\n    });\n  }\n  getAllByIsActiveForList(isActive, page, size, sortDirection, sortProperties) {\n    return axios.get(`${this.controllerUrl}/forlist/byisactive`, {\n      params: {\n        isActive,\n        page,\n        size,\n        sortDirection,\n        sortProperties\n      }\n    });\n  }\n  getAllByIsActiveAndEmployer_CompanyNameForList(companyName, isActive, page, size, sortDirection, sortProperties) {\n    return axios.get(`${this.controllerUrl}/forlist/byisactiveandemployercompanyname`, {\n      params: {\n        companyName,\n        isActive,\n        page,\n        size,\n        sortDirection,\n        sortProperties\n      }\n    });\n  }\n  getAllByIsActiveAndCityAndWorkingTimeForList(isActive, cityId, workingTimeId, page, size, sortDirection, sortProperties) {\n    return axios.get(`${this.controllerUrl}/forlist/byisactiveandcityandworkingtime`, {\n      params: {\n        cityId,\n        workingTimeId,\n        isActive,\n        page,\n        size,\n        sortDirection,\n        sortProperties\n      }\n    });\n  }\n  update(_ref2) {\n    let {\n      id,\n      applicationDeadline,\n      city: {\n        cityId\n      },\n      description,\n      employer: {\n        employerId\n      },\n      jobPosition: {\n        jobPositionId\n      },\n      maxSalary,\n      minSalary,\n      numberOfOpenPositions\n    } = _ref2;\n    return axios.put(this.controllerUrl, {\n      id,\n      applicationDeadline,\n      city: {\n        id: cityId\n      },\n      description,\n      employer: {\n        id: employerId\n      },\n      jobPosition: {\n        id: jobPositionId\n      },\n      maxSalary,\n      minSalary,\n      numberOfOpenPositions\n    });\n  }\n}","map":{"version":3,"names":["axios","JobAdvertService","constructor","controllerUrl","process","env","REACT_APP_API_URL","add","_ref","applicationDeadline","city","description","employer","jobPosition","workingTime","workingType","maxSalary","minSalary","numberOfOpenPositions","post","verifyById","id","put","params","getAll","get","getAllByIsActive","isActive","page","size","sortDirection","sortProperties","getAllByIsActiveForList","getAllByIsActiveAndEmployer_CompanyNameForList","companyName","getAllByIsActiveAndCityAndWorkingTimeForList","cityId","workingTimeId","update","_ref2","employerId","jobPositionId"],"sources":["/Users/machiavelli/Desktop/hrms-project-frontend/src/services/jobAdvertService.js"],"sourcesContent":["import axios from \"axios\";\n\nexport default class JobAdvertService {\n  controllerUrl = `${process.env.REACT_APP_API_URL}/jobadverts`;\n\n  add({\n    applicationDeadline,\n    city,\n    description,\n    employer,\n    jobPosition,\n    workingTime,\n    workingType,\n    maxSalary,\n    minSalary,\n    numberOfOpenPositions,\n  }) {\n    return axios.post(`${this.controllerUrl}`, {\n      applicationDeadline,\n      city,\n      description,\n      employer,\n      jobPosition,\n      maxSalary,\n      minSalary,\n      numberOfOpenPositions,\n      workingTime,\n      workingType,\n    });\n  }\n\n  verifyById(id) {\n    return axios.put(`${this.controllerUrl}/verify/byid`, null, {\n      params: { id },\n    });\n  }\n\n  getAll() {\n    return axios.get(`${this.controllerUrl}/getall`);\n  }\n\n  getAllByIsActive(isActive, page, size, sortDirection, sortProperties) {\n    return axios.get(`${this.controllerUrl}/byisactive`, {\n      params: {\n        isActive,\n        page,\n        size,\n        sortDirection,\n        sortProperties,\n      },\n    });\n  }\n\n  getAllByIsActiveForList(isActive, page, size, sortDirection, sortProperties) {\n    return axios.get(`${this.controllerUrl}/forlist/byisactive`, {\n      params: {\n        isActive,\n        page,\n        size,\n        sortDirection,\n        sortProperties,\n      },\n    });\n  }\n\n  getAllByIsActiveAndEmployer_CompanyNameForList(\n    companyName,\n    isActive,\n    page,\n    size,\n    sortDirection,\n    sortProperties\n  ) {\n    return axios.get(`${this.controllerUrl}/forlist/byisactiveandemployercompanyname`, {\n      params: {\n        companyName,\n        isActive,\n        page,\n        size,\n        sortDirection,\n        sortProperties,\n      },\n    });\n  }\n\n  getAllByIsActiveAndCityAndWorkingTimeForList(\n    isActive,\n    cityId,\n    workingTimeId,\n    page,\n    size,\n    sortDirection,\n    sortProperties\n  ) {\n    return axios.get(`${this.controllerUrl}/forlist/byisactiveandcityandworkingtime`, {\n      params: {\n        cityId,\n        workingTimeId,\n        isActive,\n        page,\n        size,\n        sortDirection,\n        sortProperties,\n      },\n    });\n  }\n\n  update({\n    id,\n    applicationDeadline,\n    city: { cityId },\n    description,\n    employer: { employerId },\n    jobPosition: { jobPositionId },\n    maxSalary,\n    minSalary,\n    numberOfOpenPositions,\n  }) {\n    return axios.put(this.controllerUrl, {\n      id,\n      applicationDeadline,\n      city: { id: cityId },\n      description,\n      employer: { id: employerId },\n      jobPosition: { id: jobPositionId },\n      maxSalary,\n      minSalary,\n      numberOfOpenPositions,\n    });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}