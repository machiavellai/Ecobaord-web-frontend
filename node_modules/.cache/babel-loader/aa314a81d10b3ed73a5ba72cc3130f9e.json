{"ast":null,"code":"import has from 'lodash/has'; // @ts-expect-error\n\nimport toposort from 'toposort';\nimport { split } from 'property-expr';\nimport Ref from '../Reference';\nimport isSchema from './isSchema';\nexport default function sortFields(fields) {\n  let excludes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let edges = [];\n  let nodes = [];\n  function addNode(depPath, key) {\n    var node = split(depPath)[0];\n    if (!~nodes.indexOf(node)) nodes.push(node);\n    if (!~excludes.indexOf(`${key}-${node}`)) edges.push([key, node]);\n  }\n  for (const key in fields) if (has(fields, key)) {\n    let value = fields[key];\n    if (!~nodes.indexOf(key)) nodes.push(key);\n    if (Ref.isRef(value) && value.isSibling) addNode(value.path, key);else if (isSchema(value) && 'deps' in value) value.deps.forEach(path => addNode(path, key));\n  }\n  return toposort.array(nodes, edges).reverse();\n}","map":{"version":3,"names":["has","toposort","split","Ref","isSchema","sortFields","fields","excludes","arguments","length","undefined","edges","nodes","addNode","depPath","key","node","indexOf","push","value","isRef","isSibling","path","deps","forEach","array","reverse"],"sources":["/Users/machiavelli/Desktop/hrms-project-frontend/node_modules/yup/es/util/sortFields.js"],"sourcesContent":["import has from 'lodash/has'; // @ts-expect-error\n\nimport toposort from 'toposort';\nimport { split } from 'property-expr';\nimport Ref from '../Reference';\nimport isSchema from './isSchema';\nexport default function sortFields(fields, excludes = []) {\n  let edges = [];\n  let nodes = [];\n\n  function addNode(depPath, key) {\n    var node = split(depPath)[0];\n    if (!~nodes.indexOf(node)) nodes.push(node);\n    if (!~excludes.indexOf(`${key}-${node}`)) edges.push([key, node]);\n  }\n\n  for (const key in fields) if (has(fields, key)) {\n    let value = fields[key];\n    if (!~nodes.indexOf(key)) nodes.push(key);\n    if (Ref.isRef(value) && value.isSibling) addNode(value.path, key);else if (isSchema(value) && 'deps' in value) value.deps.forEach(path => addNode(path, key));\n  }\n\n  return toposort.array(nodes, edges).reverse();\n}"],"mappings":"AAAA,OAAOA,GAAG,MAAM,YAAY,CAAC,CAAC;;AAE9B,OAAOC,QAAQ,MAAM,UAAU;AAC/B,SAASC,KAAK,QAAQ,eAAe;AACrC,OAAOC,GAAG,MAAM,cAAc;AAC9B,OAAOC,QAAQ,MAAM,YAAY;AACjC,eAAe,SAASC,UAAUA,CAACC,MAAM,EAAiB;EAAA,IAAfC,QAAQ,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EACtD,IAAIG,KAAK,GAAG,EAAE;EACd,IAAIC,KAAK,GAAG,EAAE;EAEd,SAASC,OAAOA,CAACC,OAAO,EAAEC,GAAG,EAAE;IAC7B,IAAIC,IAAI,GAAGd,KAAK,CAACY,OAAO,CAAC,CAAC,CAAC,CAAC;IAC5B,IAAI,CAAC,CAACF,KAAK,CAACK,OAAO,CAACD,IAAI,CAAC,EAAEJ,KAAK,CAACM,IAAI,CAACF,IAAI,CAAC;IAC3C,IAAI,CAAC,CAACT,QAAQ,CAACU,OAAO,CAAE,GAAEF,GAAI,IAAGC,IAAK,EAAC,CAAC,EAAEL,KAAK,CAACO,IAAI,CAAC,CAACH,GAAG,EAAEC,IAAI,CAAC,CAAC;EACnE;EAEA,KAAK,MAAMD,GAAG,IAAIT,MAAM,EAAE,IAAIN,GAAG,CAACM,MAAM,EAAES,GAAG,CAAC,EAAE;IAC9C,IAAII,KAAK,GAAGb,MAAM,CAACS,GAAG,CAAC;IACvB,IAAI,CAAC,CAACH,KAAK,CAACK,OAAO,CAACF,GAAG,CAAC,EAAEH,KAAK,CAACM,IAAI,CAACH,GAAG,CAAC;IACzC,IAAIZ,GAAG,CAACiB,KAAK,CAACD,KAAK,CAAC,IAAIA,KAAK,CAACE,SAAS,EAAER,OAAO,CAACM,KAAK,CAACG,IAAI,EAAEP,GAAG,CAAC,CAAC,KAAK,IAAIX,QAAQ,CAACe,KAAK,CAAC,IAAI,MAAM,IAAIA,KAAK,EAAEA,KAAK,CAACI,IAAI,CAACC,OAAO,CAACF,IAAI,IAAIT,OAAO,CAACS,IAAI,EAAEP,GAAG,CAAC,CAAC;EAC/J;EAEA,OAAOd,QAAQ,CAACwB,KAAK,CAACb,KAAK,EAAED,KAAK,CAAC,CAACe,OAAO,CAAC,CAAC;AAC/C"},"metadata":{},"sourceType":"module"}