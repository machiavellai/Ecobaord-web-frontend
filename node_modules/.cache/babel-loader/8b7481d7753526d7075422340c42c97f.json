{"ast":null,"code":"var _jsxFileName = \"/Users/machiavelli/Desktop/hrms-project-frontend/src/pages/JobAdverts/Add/JobAdvertsAdd.jsx\",\n    _s = $RefreshSig$();\n\nimport * as Yup from \"yup\";\nimport { Form, Formik } from \"formik\";\nimport React, { useEffect, useState } from \"react\";\nimport CityService from \"../../../services/cityService\";\nimport DisplayHeader from \"../../../components/DisplayHeader/DisplayHeader\";\nimport FormInput from \"../../../components/FormInput/FormInput\";\nimport FormSelect from \"../../../components/FormSelect/FormSelect\";\nimport FormTextArea from \"../../../components/FormTextArea/FormTextArea\";\nimport JobAdvertService from \"../../../services/jobAdvertService\";\nimport JobPositionService from \"../../../services/jobPositionService\";\nimport WorkingTimeService from \"../../../services/workingTimeService\";\nimport WorkingTypeService from \"../../../services/workingTypeService\";\nimport { toast } from \"react-toastify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function JobAdvertsAdd() {\n  _s();\n\n  const [cities, setCities] = useState([]),\n        [jobPositions, setJobPositions] = useState([]),\n        [workingTypes, setWorkingTypes] = useState([]),\n        [workingTimes, setWorkingTimes] = useState([]);\n\n  const initialValues = {\n    applicationDeadline: \"\",\n    city: \"\",\n    description: \"\",\n    jobPosition: \"\",\n    minSalary: 0,\n    maxSalary: 0,\n    numberOfOpenPositions: 1\n  },\n        schema = Yup.object().shape({\n    applicationDeadline: Yup.date().min(new Date()).required(),\n    city: Yup.object().required(),\n    description: Yup.string().required(),\n    jobPosition: Yup.object().required(),\n    minSalary: Yup.number().moreThan(0).required(),\n    maxSalary: Yup.number().moreThan(Yup.ref(\"minSalary\")).required(),\n    numberOfOpenPositions: Yup.number().moreThan(0).required(),\n    workingType: Yup.object().required(),\n    workingTime: Yup.object().required()\n  }),\n        addJobAdvert = async values => {\n    const result = await new JobAdvertService().add({ ...values,\n      employer: {\n        id: 2\n      } // TODO\n\n    });\n    if (result.data.success) toast.success(result.data.message);\n  };\n\n  const getAllJobPositions = async () => {\n    const result = await new JobPositionService().getAll();\n    setJobPositions(result.data.data);\n  },\n        getAllCity = async () => {\n    const result = await new CityService().getAll();\n    setCities(result.data.data);\n  },\n        getAllWorkingTypes = async () => {\n    const result = await new WorkingTypeService().getAll();\n    setWorkingTypes(result.data.data);\n  },\n        getAllWorkingTimes = async () => {\n    const result = await new WorkingTimeService().getAll();\n    setWorkingTimes(result.data.data);\n  };\n\n  useEffect(() => {\n    getAllCity();\n    getAllJobPositions();\n    getAllWorkingTypes();\n    getAllWorkingTimes();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(DisplayHeader, {\n      firstText: \"Add\",\n      secondText: \"Job Advert\",\n      size: \"5\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4\",\n      children: /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: initialValues,\n        validationSchema: schema,\n        onSubmit: values => addJobAdvert(values),\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm-6\",\n              children: /*#__PURE__*/_jsxDEV(FormSelect, {\n                name: \"jobPosition\",\n                options: jobPositions.map(c => ({\n                  value: c,\n                  label: c.title\n                }))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm\",\n              children: /*#__PURE__*/_jsxDEV(FormSelect, {\n                name: \"city\",\n                options: cities.map(c => ({\n                  value: c,\n                  label: c.name\n                }))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm\",\n              children: /*#__PURE__*/_jsxDEV(FormInput, {\n                type: \"number\",\n                name: \"numberOfOpenPositions\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm\",\n              children: /*#__PURE__*/_jsxDEV(FormSelect, {\n                name: \"workingType\",\n                options: workingTypes.map(w => ({\n                  value: w,\n                  label: w.name\n                }))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm\",\n              children: /*#__PURE__*/_jsxDEV(FormSelect, {\n                name: \"workingTime\",\n                options: workingTimes.map(w => ({\n                  value: w,\n                  label: w.name\n                }))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm\",\n              children: /*#__PURE__*/_jsxDEV(FormInput, {\n                type: \"number\",\n                name: \"minSalary\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm\",\n              children: /*#__PURE__*/_jsxDEV(FormInput, {\n                type: \"number\",\n                name: \"maxSalary\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 128,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormTextArea, {\n            name: \"description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n            type: \"datetime-local\",\n            name: \"applicationDeadline\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-end\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: \"btn btn-lg btn-primary\",\n              children: \"Add\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n\n_s(JobAdvertsAdd, \"X0on4HopGRMM8IvTfYbVvvIpkgA=\");\n\n_c = JobAdvertsAdd;\n\nvar _c;\n\n$RefreshReg$(_c, \"JobAdvertsAdd\");","map":{"version":3,"sources":["/Users/machiavelli/Desktop/hrms-project-frontend/src/pages/JobAdverts/Add/JobAdvertsAdd.jsx"],"names":["Yup","Form","Formik","React","useEffect","useState","CityService","DisplayHeader","FormInput","FormSelect","FormTextArea","JobAdvertService","JobPositionService","WorkingTimeService","WorkingTypeService","toast","JobAdvertsAdd","cities","setCities","jobPositions","setJobPositions","workingTypes","setWorkingTypes","workingTimes","setWorkingTimes","initialValues","applicationDeadline","city","description","jobPosition","minSalary","maxSalary","numberOfOpenPositions","schema","object","shape","date","min","Date","required","string","number","moreThan","ref","workingType","workingTime","addJobAdvert","values","result","add","employer","id","data","success","message","getAllJobPositions","getAll","getAllCity","getAllWorkingTypes","getAllWorkingTimes","map","c","value","label","title","name","w"],"mappings":"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","sourcesContent":["import * as Yup from \"yup\";\n\nimport { Form, Formik } from \"formik\";\nimport React, { useEffect, useState } from \"react\";\n\nimport CityService from \"../../../services/cityService\";\nimport DisplayHeader from \"../../../components/DisplayHeader/DisplayHeader\";\nimport FormInput from \"../../../components/FormInput/FormInput\";\nimport FormSelect from \"../../../components/FormSelect/FormSelect\";\nimport FormTextArea from \"../../../components/FormTextArea/FormTextArea\";\nimport JobAdvertService from \"../../../services/jobAdvertService\";\nimport JobPositionService from \"../../../services/jobPositionService\";\nimport WorkingTimeService from \"../../../services/workingTimeService\";\nimport WorkingTypeService from \"../../../services/workingTypeService\";\nimport { toast } from \"react-toastify\";\n\nexport default function JobAdvertsAdd() {\n  const [cities, setCities] = useState([]),\n    [jobPositions, setJobPositions] = useState([]),\n    [workingTypes, setWorkingTypes] = useState([]),\n    [workingTimes, setWorkingTimes] = useState([]);\n\n  const initialValues = {\n      applicationDeadline: \"\",\n      city: \"\",\n      description: \"\",\n      jobPosition: \"\",\n      minSalary: 0,\n      maxSalary: 0,\n      numberOfOpenPositions: 1,\n    },\n    schema = Yup.object().shape({\n      applicationDeadline: Yup.date().min(new Date()).required(),\n      city: Yup.object().required(),\n      description: Yup.string().required(),\n      jobPosition: Yup.object().required(),\n      minSalary: Yup.number().moreThan(0).required(),\n      maxSalary: Yup.number().moreThan(Yup.ref(\"minSalary\")).required(),\n      numberOfOpenPositions: Yup.number().moreThan(0).required(),\n      workingType: Yup.object().required(),\n      workingTime: Yup.object().required(),\n    }),\n    addJobAdvert = async (values) => {\n      const result = await new JobAdvertService().add({\n        ...values,\n        employer: { id: 2 }, // TODO\n      });\n      if (result.data.success) toast.success(result.data.message);\n    };\n\n  const getAllJobPositions = async () => {\n      const result = await new JobPositionService().getAll();\n      setJobPositions(result.data.data);\n    },\n    getAllCity = async () => {\n      const result = await new CityService().getAll();\n      setCities(result.data.data);\n    },\n    getAllWorkingTypes = async () => {\n      const result = await new WorkingTypeService().getAll();\n      setWorkingTypes(result.data.data);\n    },\n    getAllWorkingTimes = async () => {\n      const result = await new WorkingTimeService().getAll();\n      setWorkingTimes(result.data.data);\n    };\n\n  useEffect(() => {\n    getAllCity();\n    getAllJobPositions();\n    getAllWorkingTypes();\n    getAllWorkingTimes();\n  }, []);\n\n  return (\n    <div className='container'>\n      <DisplayHeader firstText='Add' secondText='Job Advert' size='5' />\n      <div className='mt-4'>\n        <Formik\n          initialValues={initialValues}\n          validationSchema={schema}\n          onSubmit={(values) => addJobAdvert(values)}\n        >\n          <Form>\n            <div className='row'>\n              <div className='col-sm-6'>\n                <FormSelect\n                  name='jobPosition'\n                  options={jobPositions.map((c) => ({\n                    value: c,\n                    label: c.title,\n                  }))}\n                />\n              </div>\n              <div className='col-sm'>\n                <FormSelect\n                  name='city'\n                  options={cities.map((c) => ({ value: c, label: c.name }))}\n                />\n              </div>\n              <div className='col-sm'>\n                <FormInput type='number' name='numberOfOpenPositions' />\n              </div>\n            </div>\n            <div className='row'>\n              <div className='col-sm'>\n                <FormSelect\n                  name='workingType'\n                  options={workingTypes.map((w) => ({\n                    value: w,\n                    label: w.name,\n                  }))}\n                />\n              </div>\n              <div className='col-sm'>\n                <FormSelect\n                  name='workingTime'\n                  options={workingTimes.map((w) => ({\n                    value: w,\n                    label: w.name,\n                  }))}\n                />\n              </div>\n              <div className='col-sm'>\n                <FormInput type='number' name='minSalary' />\n              </div>\n              <div className='col-sm'>\n                <FormInput type='number' name='maxSalary' />\n              </div>\n            </div>\n            <FormTextArea name='description' />\n            <FormInput type='datetime-local' name='applicationDeadline' />\n            <div className='text-end'>\n              <button type='submit' className='btn btn-lg btn-primary'>\n                Add\n              </button>\n            </div>\n          </Form>\n        </Formik>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}