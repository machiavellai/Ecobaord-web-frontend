{"ast":null,"code":"import axios from \"axios\";\nexport default class EmployerService {\n  constructor() {\n    this.controllerUrl = `${process.env.REACT_APP_API_URL}/employers`;\n  }\n\n  getAll() {\n    return axios.get(this.controllerUrl);\n  }\n\n  getLastUpdateByUserId(employerId) {\n    return axios.get(`${this.controllerUrl}/update/byuserid/last`, {\n      params: {\n        employerId\n      }\n    });\n  }\n\n  getAllUpdateByIsApprovedAndIsDeleted(isApproved = false, isDeleted = false) {\n    return axios.get(`${this.controllerUrl}/update/byisapprovedandisdeleted`, {\n      params: {\n        isApproved,\n        isDeleted\n      }\n    });\n  }\n\n  getById(id) {\n    return axios.get(`${this.controllerUrl}/byid`, {\n      params: {\n        id\n      }\n    });\n  }\n\n  updateByUser({\n    employerId,\n    companyName,\n    companyImage,\n    website,\n    corporateEmail,\n    phone,\n    password\n  }) {\n    const formData = new FormData();\n    formData.append(\"companyImage\", companyImage);\n    return axios.put(`${this.controllerUrl}/byuser`, formData, {\n      params: {\n        employerId,\n        companyName,\n        website,\n        corporateEmail,\n        phone,\n        password\n      }\n    });\n  }\n\n  verifyUpdate(employerUpdateId) {\n    return axios.put(`${this.controllerUrl}/verify/update`, null, {\n      params: {\n        employerUpdateId\n      }\n    });\n  }\n\n  denyUpdate(employerUpdateId) {\n    return axios.put(`${this.controllerUrl}/deny/update`, null, {\n      params: {\n        employerUpdateId\n      }\n    });\n  }\n\n  register({\n    companyName,\n    confirmPassword,\n    corporateEmail,\n    email,\n    password,\n    phone,\n    website\n  }) {\n    return axios.post(`${this.controllerUrl}/register`, {\n      companyName,\n      confirmPassword,\n      corporateEmail,\n      email,\n      password,\n      phone,\n      website\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/machiavelli/Desktop/hrms-project-frontend/src/services/employerService.js"],"names":["axios","EmployerService","controllerUrl","process","env","REACT_APP_API_URL","getAll","get","getLastUpdateByUserId","employerId","params","getAllUpdateByIsApprovedAndIsDeleted","isApproved","isDeleted","getById","id","updateByUser","companyName","companyImage","website","corporateEmail","phone","password","formData","FormData","append","put","verifyUpdate","employerUpdateId","denyUpdate","register","confirmPassword","email","post"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,eAAe,MAAMC,eAAN,CAAsB;AAAA;AAAA,SACnCC,aADmC,GAClB,GAAEC,OAAO,CAACC,GAAR,CAAYC,iBAAkB,YADd;AAAA;;AAGnCC,EAAAA,MAAM,GAAG;AACP,WAAON,KAAK,CAACO,GAAN,CAAU,KAAKL,aAAf,CAAP;AACD;;AAEDM,EAAAA,qBAAqB,CAACC,UAAD,EAAa;AAChC,WAAOT,KAAK,CAACO,GAAN,CAAW,GAAE,KAAKL,aAAc,uBAAhC,EAAwD;AAC7DQ,MAAAA,MAAM,EAAE;AAAED,QAAAA;AAAF;AADqD,KAAxD,CAAP;AAGD;;AAEDE,EAAAA,oCAAoC,CAACC,UAAU,GAAG,KAAd,EAAqBC,SAAS,GAAG,KAAjC,EAAwC;AAC1E,WAAOb,KAAK,CAACO,GAAN,CAAW,GAAE,KAAKL,aAAc,kCAAhC,EAAmE;AACxEQ,MAAAA,MAAM,EAAE;AAAEE,QAAAA,UAAF;AAAcC,QAAAA;AAAd;AADgE,KAAnE,CAAP;AAGD;;AAEDC,EAAAA,OAAO,CAACC,EAAD,EAAK;AACV,WAAOf,KAAK,CAACO,GAAN,CAAW,GAAE,KAAKL,aAAc,OAAhC,EAAwC;AAAEQ,MAAAA,MAAM,EAAE;AAAEK,QAAAA;AAAF;AAAV,KAAxC,CAAP;AACD;;AAEDC,EAAAA,YAAY,CAAC;AACXP,IAAAA,UADW;AAEXQ,IAAAA,WAFW;AAGXC,IAAAA,YAHW;AAIXC,IAAAA,OAJW;AAKXC,IAAAA,cALW;AAMXC,IAAAA,KANW;AAOXC,IAAAA;AAPW,GAAD,EAQT;AACD,UAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,cAAhB,EAAgCP,YAAhC;AACA,WAAOlB,KAAK,CAAC0B,GAAN,CAAW,GAAE,KAAKxB,aAAc,SAAhC,EAA0CqB,QAA1C,EAAoD;AACzDb,MAAAA,MAAM,EAAE;AAAED,QAAAA,UAAF;AAAcQ,QAAAA,WAAd;AAA2BE,QAAAA,OAA3B;AAAoCC,QAAAA,cAApC;AAAoDC,QAAAA,KAApD;AAA2DC,QAAAA;AAA3D;AADiD,KAApD,CAAP;AAGD;;AAEDK,EAAAA,YAAY,CAACC,gBAAD,EAAmB;AAC7B,WAAO5B,KAAK,CAAC0B,GAAN,CAAW,GAAE,KAAKxB,aAAc,gBAAhC,EAAiD,IAAjD,EAAuD;AAC5DQ,MAAAA,MAAM,EAAE;AAAEkB,QAAAA;AAAF;AADoD,KAAvD,CAAP;AAGD;;AAEDC,EAAAA,UAAU,CAACD,gBAAD,EAAmB;AAC3B,WAAO5B,KAAK,CAAC0B,GAAN,CAAW,GAAE,KAAKxB,aAAc,cAAhC,EAA+C,IAA/C,EAAqD;AAC1DQ,MAAAA,MAAM,EAAE;AAAEkB,QAAAA;AAAF;AADkD,KAArD,CAAP;AAGD;;AAEDE,EAAAA,QAAQ,CAAC;AAAEb,IAAAA,WAAF;AAAec,IAAAA,eAAf;AAAgCX,IAAAA,cAAhC;AAAgDY,IAAAA,KAAhD;AAAuDV,IAAAA,QAAvD;AAAiED,IAAAA,KAAjE;AAAwEF,IAAAA;AAAxE,GAAD,EAAoF;AAC1F,WAAOnB,KAAK,CAACiC,IAAN,CAAY,GAAE,KAAK/B,aAAc,WAAjC,EAA6C;AAClDe,MAAAA,WADkD;AAElDc,MAAAA,eAFkD;AAGlDX,MAAAA,cAHkD;AAIlDY,MAAAA,KAJkD;AAKlDV,MAAAA,QALkD;AAMlDD,MAAAA,KANkD;AAOlDF,MAAAA;AAPkD,KAA7C,CAAP;AASD;;AA7DkC","sourcesContent":["import axios from \"axios\";\n\nexport default class EmployerService {\n  controllerUrl = `${process.env.REACT_APP_API_URL}/employers`;\n\n  getAll() {\n    return axios.get(this.controllerUrl);\n  }\n\n  getLastUpdateByUserId(employerId) {\n    return axios.get(`${this.controllerUrl}/update/byuserid/last`, {\n      params: { employerId },\n    });\n  }\n\n  getAllUpdateByIsApprovedAndIsDeleted(isApproved = false, isDeleted = false) {\n    return axios.get(`${this.controllerUrl}/update/byisapprovedandisdeleted`, {\n      params: { isApproved, isDeleted },\n    });\n  }\n\n  getById(id) {\n    return axios.get(`${this.controllerUrl}/byid`, { params: { id } });\n  }\n\n  updateByUser({\n    employerId,\n    companyName,\n    companyImage,\n    website,\n    corporateEmail,\n    phone,\n    password,\n  }) {\n    const formData = new FormData();\n    formData.append(\"companyImage\", companyImage);\n    return axios.put(`${this.controllerUrl}/byuser`, formData, {\n      params: { employerId, companyName, website, corporateEmail, phone, password },\n    });\n  }\n\n  verifyUpdate(employerUpdateId) {\n    return axios.put(`${this.controllerUrl}/verify/update`, null, {\n      params: { employerUpdateId },\n    });\n  }\n\n  denyUpdate(employerUpdateId) {\n    return axios.put(`${this.controllerUrl}/deny/update`, null, {\n      params: { employerUpdateId },\n    });\n  }\n\n  register({ companyName, confirmPassword, corporateEmail, email, password, phone, website }) {\n    return axios.post(`${this.controllerUrl}/register`, {\n      companyName,\n      confirmPassword,\n      corporateEmail,\n      email,\n      password,\n      phone,\n      website,\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}