{"ast":null,"code":"import axios from \"axios\";\nexport default class EmployerService {\n  constructor() {\n    this.controllerUrl = `${process.env.REACT_APP_API_URL}/employers`;\n  }\n  getAll() {\n    return axios.get(this.controllerUrl);\n  }\n  getLastUpdateByUserId(employerId) {\n    return axios.get(`${this.controllerUrl}/update/byuserid/last`, {\n      params: {\n        employerId\n      }\n    });\n  }\n  getAllUpdateByIsApprovedAndIsDeleted() {\n    let isApproved = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    let isDeleted = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return axios.get(`${this.controllerUrl}/update/byisapprovedandisdeleted`, {\n      params: {\n        isApproved,\n        isDeleted\n      }\n    });\n  }\n  getById(id) {\n    return axios.get(`${this.controllerUrl}/byid`, {\n      params: {\n        id\n      }\n    });\n  }\n  updateByUser(_ref) {\n    let {\n      employerId,\n      companyName,\n      companyImage,\n      website,\n      corporateEmail,\n      phone,\n      password\n    } = _ref;\n    const formData = new FormData();\n    formData.append(\"companyImage\", companyImage);\n    return axios.put(`${this.controllerUrl}/byuser`, formData, {\n      params: {\n        employerId,\n        companyName,\n        website,\n        corporateEmail,\n        phone,\n        password\n      }\n    });\n  }\n  verifyUpdate(employerUpdateId) {\n    return axios.put(`${this.controllerUrl}/verify/update`, null, {\n      params: {\n        employerUpdateId\n      }\n    });\n  }\n  denyUpdate(employerUpdateId) {\n    return axios.put(`${this.controllerUrl}/deny/update`, null, {\n      params: {\n        employerUpdateId\n      }\n    });\n  }\n  register(_ref2) {\n    let {\n      companyName,\n      confirmPassword,\n      corporateEmail,\n      email,\n      password,\n      phone,\n      website\n    } = _ref2;\n    return axios.post(`${this.controllerUrl}/register`, {\n      companyName,\n      confirmPassword,\n      corporateEmail,\n      email,\n      password,\n      phone,\n      website\n    });\n  }\n}","map":{"version":3,"names":["axios","EmployerService","constructor","controllerUrl","process","env","REACT_APP_API_URL","getAll","get","getLastUpdateByUserId","employerId","params","getAllUpdateByIsApprovedAndIsDeleted","isApproved","arguments","length","undefined","isDeleted","getById","id","updateByUser","_ref","companyName","companyImage","website","corporateEmail","phone","password","formData","FormData","append","put","verifyUpdate","employerUpdateId","denyUpdate","register","_ref2","confirmPassword","email","post"],"sources":["/Users/machiavelli/Desktop/hrms-project-frontend/src/services/employerService.js"],"sourcesContent":["import axios from \"axios\";\n\nexport default class EmployerService {\n  controllerUrl = `${process.env.REACT_APP_API_URL}/employers`;\n\n  getAll() {\n    return axios.get(this.controllerUrl);\n  }\n\n  getLastUpdateByUserId(employerId) {\n    return axios.get(`${this.controllerUrl}/update/byuserid/last`, {\n      params: { employerId },\n    });\n  }\n\n  getAllUpdateByIsApprovedAndIsDeleted(isApproved = false, isDeleted = false) {\n    return axios.get(`${this.controllerUrl}/update/byisapprovedandisdeleted`, {\n      params: { isApproved, isDeleted },\n    });\n  }\n\n  getById(id) {\n    return axios.get(`${this.controllerUrl}/byid`, { params: { id } });\n  }\n\n  updateByUser({\n    employerId,\n    companyName,\n    companyImage,\n    website,\n    corporateEmail,\n    phone,\n    password,\n  }) {\n    const formData = new FormData();\n    formData.append(\"companyImage\", companyImage);\n    return axios.put(`${this.controllerUrl}/byuser`, formData, {\n      params: { employerId, companyName, website, corporateEmail, phone, password },\n    });\n  }\n\n  verifyUpdate(employerUpdateId) {\n    return axios.put(`${this.controllerUrl}/verify/update`, null, {\n      params: { employerUpdateId },\n    });\n  }\n\n  denyUpdate(employerUpdateId) {\n    return axios.put(`${this.controllerUrl}/deny/update`, null, {\n      params: { employerUpdateId },\n    });\n  }\n\n  register({ companyName, confirmPassword, corporateEmail, email, password, phone, website }) {\n    return axios.post(`${this.controllerUrl}/register`, {\n      companyName,\n      confirmPassword,\n      corporateEmail,\n      email,\n      password,\n      phone,\n      website,\n    });\n  }\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,eAAe,MAAMC,eAAe,CAAC;EAAAC,YAAA;IAAA,KACnCC,aAAa,GAAI,GAAEC,OAAO,CAACC,GAAG,CAACC,iBAAkB,YAAW;EAAA;EAE5DC,MAAMA,CAAA,EAAG;IACP,OAAOP,KAAK,CAACQ,GAAG,CAAC,IAAI,CAACL,aAAa,CAAC;EACtC;EAEAM,qBAAqBA,CAACC,UAAU,EAAE;IAChC,OAAOV,KAAK,CAACQ,GAAG,CAAE,GAAE,IAAI,CAACL,aAAc,uBAAsB,EAAE;MAC7DQ,MAAM,EAAE;QAAED;MAAW;IACvB,CAAC,CAAC;EACJ;EAEAE,oCAAoCA,CAAA,EAAwC;IAAA,IAAvCC,UAAU,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;IAAA,IAAEG,SAAS,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;IACxE,OAAOd,KAAK,CAACQ,GAAG,CAAE,GAAE,IAAI,CAACL,aAAc,kCAAiC,EAAE;MACxEQ,MAAM,EAAE;QAAEE,UAAU;QAAEI;MAAU;IAClC,CAAC,CAAC;EACJ;EAEAC,OAAOA,CAACC,EAAE,EAAE;IACV,OAAOnB,KAAK,CAACQ,GAAG,CAAE,GAAE,IAAI,CAACL,aAAc,OAAM,EAAE;MAAEQ,MAAM,EAAE;QAAEQ;MAAG;IAAE,CAAC,CAAC;EACpE;EAEAC,YAAYA,CAAAC,IAAA,EAQT;IAAA,IARU;MACXX,UAAU;MACVY,WAAW;MACXC,YAAY;MACZC,OAAO;MACPC,cAAc;MACdC,KAAK;MACLC;IACF,CAAC,GAAAN,IAAA;IACC,MAAMO,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,cAAc,EAAEP,YAAY,CAAC;IAC7C,OAAOvB,KAAK,CAAC+B,GAAG,CAAE,GAAE,IAAI,CAAC5B,aAAc,SAAQ,EAAEyB,QAAQ,EAAE;MACzDjB,MAAM,EAAE;QAAED,UAAU;QAAEY,WAAW;QAAEE,OAAO;QAAEC,cAAc;QAAEC,KAAK;QAAEC;MAAS;IAC9E,CAAC,CAAC;EACJ;EAEAK,YAAYA,CAACC,gBAAgB,EAAE;IAC7B,OAAOjC,KAAK,CAAC+B,GAAG,CAAE,GAAE,IAAI,CAAC5B,aAAc,gBAAe,EAAE,IAAI,EAAE;MAC5DQ,MAAM,EAAE;QAAEsB;MAAiB;IAC7B,CAAC,CAAC;EACJ;EAEAC,UAAUA,CAACD,gBAAgB,EAAE;IAC3B,OAAOjC,KAAK,CAAC+B,GAAG,CAAE,GAAE,IAAI,CAAC5B,aAAc,cAAa,EAAE,IAAI,EAAE;MAC1DQ,MAAM,EAAE;QAAEsB;MAAiB;IAC7B,CAAC,CAAC;EACJ;EAEAE,QAAQA,CAAAC,KAAA,EAAoF;IAAA,IAAnF;MAAEd,WAAW;MAAEe,eAAe;MAAEZ,cAAc;MAAEa,KAAK;MAAEX,QAAQ;MAAED,KAAK;MAAEF;IAAQ,CAAC,GAAAY,KAAA;IACxF,OAAOpC,KAAK,CAACuC,IAAI,CAAE,GAAE,IAAI,CAACpC,aAAc,WAAU,EAAE;MAClDmB,WAAW;MACXe,eAAe;MACfZ,cAAc;MACda,KAAK;MACLX,QAAQ;MACRD,KAAK;MACLF;IACF,CAAC,CAAC;EACJ;AACF"},"metadata":{},"sourceType":"module"}