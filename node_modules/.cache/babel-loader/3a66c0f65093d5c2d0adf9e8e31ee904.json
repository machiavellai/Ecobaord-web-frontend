{"ast":null,"code":"var _jsxFileName = \"/Users/machiavelli/Desktop/hrms-project-frontend/src/pages/CompanyStaff/Update/CompanyStaffUpdate.jsx\",\n  _s = $RefreshSig$();\nimport * as Yup from \"yup\";\nimport { Form, Formik } from \"formik\";\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport CompanyStaffService from \"../../../services/companyStaffService\";\nimport DisplayHeader from \"../../../components/DisplayHeader/DisplayHeader\";\nimport FormInput from \"../../../components/FormInput/FormInput\";\nimport LoadingSpinner from \"../../../components/LoadingSpinner/LoadingSpinner\";\nimport { toast } from \"react-toastify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CompanyStaffUpdate() {\n  _s();\n  const [companyStaff, setCompanyStaff] = useState(null);\n  const companyStaffService = useMemo(() => new CompanyStaffService(), []),\n    getById = useCallback(async () => {\n      const user = {\n          id: 3\n        },\n        //TODO Login Redux\n        result = await companyStaffService.getById(user.id);\n      if (result.data.success) setCompanyStaff(result.data.data);\n    }, [companyStaffService]),\n    updateByUser = async values => {\n      const updatedCompanyStaff = {\n          id: companyStaff.id,\n          ...values\n        },\n        result = await companyStaffService.updateByUser(updatedCompanyStaff);\n      if (result.data.success) {\n        toast.success(result.data.message);\n        setCompanyStaff(updatedCompanyStaff);\n      }\n    };\n  useEffect(() => {\n    getById();\n  }, [getById]);\n  const initialValues = {\n      password: \"\"\n    },\n    validationSchema = Yup.object().shape({\n      firstName: Yup.string().required(),\n      lastName: Yup.string().required(),\n      password: Yup.string().required()\n    });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(DisplayHeader, {\n      firstText: \"Edit\",\n      secondText: \"Employer Information\",\n      size: \"5\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), companyStaff ? /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        firstName: companyStaff.firstName,\n        lastName: companyStaff.lastName,\n        ...initialValues\n      },\n      validationSchema: validationSchema,\n      onSubmit: values => updateByUser(values),\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(FormInput, {\n          name: \"firstName\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n          name: \"lastName\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n          type: \"password\",\n          name: \"password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-primary w-100 mt-3\",\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(CompanyStaffUpdate, \"NZjVSZJbGtpMcE2SlxBM1rtjKhs=\");\n_c = CompanyStaffUpdate;\nvar _c;\n$RefreshReg$(_c, \"CompanyStaffUpdate\");","map":{"version":3,"names":["Yup","Form","Formik","React","useCallback","useEffect","useMemo","useState","CompanyStaffService","DisplayHeader","FormInput","LoadingSpinner","toast","jsxDEV","_jsxDEV","CompanyStaffUpdate","_s","companyStaff","setCompanyStaff","companyStaffService","getById","user","id","result","data","success","updateByUser","values","updatedCompanyStaff","message","initialValues","password","validationSchema","object","shape","firstName","string","required","lastName","className","children","firstText","secondText","size","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","name","type","_c","$RefreshReg$"],"sources":["/Users/machiavelli/Desktop/hrms-project-frontend/src/pages/CompanyStaff/Update/CompanyStaffUpdate.jsx"],"sourcesContent":["import * as Yup from \"yup\";\n\nimport { Form, Formik } from \"formik\";\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\n\nimport CompanyStaffService from \"../../../services/companyStaffService\";\nimport DisplayHeader from \"../../../components/DisplayHeader/DisplayHeader\";\nimport FormInput from \"../../../components/FormInput/FormInput\";\nimport LoadingSpinner from \"../../../components/LoadingSpinner/LoadingSpinner\";\nimport { toast } from \"react-toastify\";\n\nexport default function CompanyStaffUpdate() {\n  const [companyStaff, setCompanyStaff] = useState(null);\n\n  const companyStaffService = useMemo(() => new CompanyStaffService(), []),\n    getById = useCallback(async () => {\n      const user = { id: 3 }, //TODO Login Redux\n        result = await companyStaffService.getById(user.id);\n      if (result.data.success) setCompanyStaff(result.data.data);\n    }, [companyStaffService]),\n    updateByUser = async (values) => {\n      const updatedCompanyStaff = {\n          id: companyStaff.id,\n          ...values,\n        },\n        result = await companyStaffService.updateByUser(updatedCompanyStaff);\n\n      if (result.data.success) {\n        toast.success(result.data.message);\n        setCompanyStaff(updatedCompanyStaff);\n      }\n    };\n\n  useEffect(() => {\n    getById();\n  }, [getById]);\n\n  const initialValues = {\n      password: \"\",\n    },\n    validationSchema = Yup.object().shape({\n      firstName: Yup.string().required(),\n      lastName: Yup.string().required(),\n      password: Yup.string().required(),\n    });\n\n  return (\n    <div className='container'>\n      <DisplayHeader firstText='Edit' secondText='Employer Information' size='5' />\n      {companyStaff ? (\n        <Formik\n          initialValues={{\n            firstName: companyStaff.firstName,\n            lastName: companyStaff.lastName,\n            ...initialValues,\n          }}\n          validationSchema={validationSchema}\n          onSubmit={(values) => updateByUser(values)}\n        >\n          <Form>\n            <FormInput name='firstName' />\n            <FormInput name='lastName' />\n            <FormInput type='password' name='password' />\n            <button type='submit' className='btn btn-primary w-100 mt-3'>\n              Save\n            </button>\n          </Form>\n        </Formik>\n      ) : (\n        <LoadingSpinner />\n      )}\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}