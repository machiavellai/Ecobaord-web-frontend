{"ast":null,"code":"var _jsxFileName = \"/Users/machiavelli/Desktop/hrms-project-frontend/src/pages/JobSeekers/CV/Update/JobSeekerCVUpdateImages.jsx\",\n    _s = $RefreshSig$();\n\nimport * as Yup from \"yup\";\nimport { Form, Formik } from \"formik\";\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport FormFileInput from \"../../../../components/FormFileInput/FormFileInput\";\nimport JobSeekerCVImageService from \"../../../../services/jobSeekerCVImageService\";\nimport { toast } from \"react-toastify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function JobSeekerCVUpdateImages({\n  jobSeekerCV\n}) {\n  _s();\n\n  const [images, setImages] = useState([]),\n        [isEditing, setIsEditing] = useState(false);\n  const initialValues = {\n    image: null\n  },\n        validationSchema = Yup.object().shape({\n    image: Yup.mixed().required()\n  });\n\n  const toggleEditing = () => setIsEditing(!isEditing);\n\n  const jobSeekerCVImageService = useMemo(() => new JobSeekerCVImageService(), []),\n        getAllByJobSeekerId = useCallback(async jobSeekerId => {\n    const result = await jobSeekerCVImageService.getAllByJobSeekerCV_Id(jobSeekerId);\n    if (result.data.success) setImages(result.data.data);\n  }, [jobSeekerCVImageService]),\n        addImage = async values => {\n    const result = await jobSeekerCVImageService.addAndSave(values.image, jobSeekerCV.jobSeeker.id);\n\n    if (result.data.success) {\n      getAllByJobSeekerId(jobSeekerCV.jobSeeker.id);\n      toast.success(result.data.message);\n    }\n  },\n        deleteImage = async id => {\n    const result = await jobSeekerCVImageService.delete(id);\n\n    if (result.data.success) {\n      setImages(images.filter(i => i.id !== id));\n      toast.success(result.data.message);\n    }\n  };\n\n  useEffect(() => {\n    getAllByJobSeekerId(jobSeekerCV.id);\n  }, [getAllByJobSeekerId, jobSeekerCV.id]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex justify-content-between align-items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Images\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), !isEditing ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn shadow-none\",\n        onClick: () => toggleEditing(),\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"bi bi-pencil-square\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn shadow-none\",\n        onClick: () => toggleEditing(),\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"bi bi-check-lg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), images.length > 0 ? images.map(image => /*#__PURE__*/_jsxDEV(\"figure\", {\n      className: \"figure position-relative me-3 mb-3\",\n      children: [isEditing && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => deleteImage(image.id),\n        className: \"btn btn-danger text-white position-absolute\",\n        style: {\n          right: 0\n        },\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"bi bi-trash-fill\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: image.url,\n        className: \"figure-img img-fluid rounded img-thumbnail rounded shadow\",\n        alt: `${jobSeekerCV.jobSeeker.firstName} ${jobSeekerCV.jobSeeker.lastName}`,\n        width: \"150\",\n        height: \"150\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"figcaption\", {\n        className: \"figure-caption\",\n        children: new Date(...image.createdAt).toLocaleString()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }, this)]\n    }, image.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex justify-content-center align-items-center display-1 text-light\",\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"bi bi-text-paragraph\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this), isEditing && /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: initialValues,\n      validationSchema: validationSchema,\n      onSubmit: values => addImage(values),\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: /*#__PURE__*/_jsxDEV(FormFileInput, {\n          name: \"image\",\n          label: false,\n          accept: \"image/png, image/jpeg\",\n          render: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"input-group-text btn btn-primary\",\n            htmlFor: `image-file-input`,\n            children: \"Upload\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n\n_s(JobSeekerCVUpdateImages, \"B435dzCrUwuPrQN3XRMN+COz6OY=\");\n\n_c = JobSeekerCVUpdateImages;\n\nvar _c;\n\n$RefreshReg$(_c, \"JobSeekerCVUpdateImages\");","map":{"version":3,"sources":["/Users/machiavelli/Desktop/hrms-project-frontend/src/pages/JobSeekers/CV/Update/JobSeekerCVUpdateImages.jsx"],"names":["Yup","Form","Formik","React","useCallback","useEffect","useMemo","useState","FormFileInput","JobSeekerCVImageService","toast","JobSeekerCVUpdateImages","jobSeekerCV","images","setImages","isEditing","setIsEditing","initialValues","image","validationSchema","object","shape","mixed","required","toggleEditing","jobSeekerCVImageService","getAllByJobSeekerId","jobSeekerId","result","getAllByJobSeekerCV_Id","data","success","addImage","values","addAndSave","jobSeeker","id","message","deleteImage","delete","filter","i","length","map","right","url","firstName","lastName","Date","createdAt","toLocaleString"],"mappings":"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","sourcesContent":["import * as Yup from \"yup\";\n\nimport { Form, Formik } from \"formik\";\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\n\nimport FormFileInput from \"../../../../components/FormFileInput/FormFileInput\";\nimport JobSeekerCVImageService from \"../../../../services/jobSeekerCVImageService\";\nimport { toast } from \"react-toastify\";\n\nexport default function JobSeekerCVUpdateImages({ jobSeekerCV }) {\n  const [images, setImages] = useState([]),\n    [isEditing, setIsEditing] = useState(false);\n\n  const initialValues = { image: null },\n    validationSchema = Yup.object().shape({\n      image: Yup.mixed().required(),\n    });\n\n  const toggleEditing = () => setIsEditing(!isEditing);\n\n  const jobSeekerCVImageService = useMemo(() => new JobSeekerCVImageService(), []),\n    getAllByJobSeekerId = useCallback(\n      async (jobSeekerId) => {\n        const result = await jobSeekerCVImageService.getAllByJobSeekerCV_Id(jobSeekerId);\n        if (result.data.success) setImages(result.data.data);\n      },\n      [jobSeekerCVImageService]\n    ),\n    addImage = async (values) => {\n      const result = await jobSeekerCVImageService.addAndSave(\n        values.image,\n        jobSeekerCV.jobSeeker.id\n      );\n      if (result.data.success) {\n        getAllByJobSeekerId(jobSeekerCV.jobSeeker.id);\n        toast.success(result.data.message);\n      }\n    },\n    deleteImage = async (id) => {\n      const result = await jobSeekerCVImageService.delete(id);\n      if (result.data.success) {\n        setImages(images.filter((i) => i.id !== id));\n        toast.success(result.data.message);\n      }\n    };\n\n  useEffect(() => {\n    getAllByJobSeekerId(jobSeekerCV.id);\n  }, [getAllByJobSeekerId, jobSeekerCV.id]);\n\n  return (\n    <div>\n      <div className='d-flex justify-content-between align-items-center'>\n        <h3>Images</h3>\n        {!isEditing ? (\n          <button className='btn shadow-none' onClick={() => toggleEditing()}>\n            <i className='bi bi-pencil-square' />\n          </button>\n        ) : (\n          <button className='btn shadow-none' onClick={() => toggleEditing()}>\n            <i className='bi bi-check-lg' />\n          </button>\n        )}\n      </div>\n\n      {images.length > 0 ? (\n        images.map((image) => (\n          <figure key={image.id} className='figure position-relative me-3 mb-3'>\n            {isEditing && (\n              <button\n                onClick={() => deleteImage(image.id)}\n                className='btn btn-danger text-white position-absolute'\n                style={{ right: 0 }}\n              >\n                <i className='bi bi-trash-fill' />\n              </button>\n            )}\n            <img\n              src={image.url}\n              className='figure-img img-fluid rounded img-thumbnail rounded shadow'\n              alt={`${jobSeekerCV.jobSeeker.firstName} ${jobSeekerCV.jobSeeker.lastName}`}\n              width='150'\n              height='150'\n            />\n            <figcaption className='figure-caption'>\n              {new Date(...image.createdAt).toLocaleString()}\n            </figcaption>\n          </figure>\n        ))\n      ) : (\n        <div className='d-flex justify-content-center align-items-center display-1 text-light'>\n          <i className='bi bi-text-paragraph' />\n        </div>\n      )}\n\n      {isEditing && (\n        <Formik\n          initialValues={initialValues}\n          validationSchema={validationSchema}\n          onSubmit={(values) => addImage(values)}\n        >\n          <Form>\n            <FormFileInput\n              name='image'\n              label={false}\n              accept='image/png, image/jpeg'\n              render={\n                <button\n                  type='submit'\n                  className='input-group-text btn btn-primary'\n                  htmlFor={`image-file-input`}\n                >\n                  Upload\n                </button>\n              }\n            />\n          </Form>\n        </Formik>\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}