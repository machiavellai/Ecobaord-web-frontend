{"ast":null,"code":"var _jsxFileName = \"/Users/machiavelli/Desktop/hrms-project-frontend/src/pages/JobSeekers/CV/Update/JobSeekerCVUpdateLanguages.jsx\",\n    _s = $RefreshSig$();\n\nimport * as Yup from \"yup\";\nimport { Form, Formik } from \"formik\";\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport FormSelect from \"../../../../components/FormSelect/FormSelect\";\nimport JobSeekerCVLanguageService from \"../../../../services/jobSeekerCVLanguageService\";\nimport LanguageService from \"../../../../services/languageService\";\nimport { toast } from \"react-toastify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function JobSeekerCVUpdateLanguages({\n  jobSeekerCV\n}) {\n  _s();\n\n  const [jobSeekerCVLanguages, setJobSeekerCVLanguages] = useState([]),\n        [languages, setLanguages] = useState([]),\n        [isEditing, setIsEditing] = useState(false);\n\n  const toggleEditing = () => setIsEditing(!isEditing);\n\n  const languageService = useMemo(() => new LanguageService(), []),\n        getAllLanguages = useCallback(async () => {\n    const result = await languageService.getAll();\n    setLanguages(result.data.data);\n  }, [languageService]);\n\n  const jobSeekerCVLanguageService = useMemo(() => new JobSeekerCVLanguageService(), []),\n        getAllByJobSeekerCVId = useCallback(async jobSeekerCVId => {\n    const result = await jobSeekerCVLanguageService.getAllByJobSeekerCV_Id(jobSeekerCVId);\n    if (result.data.success) setJobSeekerCVLanguages(result.data.data);\n  }, [jobSeekerCVLanguageService]),\n        addJobSeekerCVLanguage = async values => {\n    const newJobSeekerCVLanguage = {\n      jobSeekerCV,\n      ...values\n    };\n    const result = await jobSeekerCVLanguageService.add(newJobSeekerCVLanguage);\n\n    if (result.data.success) {\n      toast.success(result.data.message);\n      getAllByJobSeekerCVId(jobSeekerCV.id);\n    }\n  },\n        deleteJobSeekerCVLanguage = async jobSeekerCVLanguageId => {\n    const result = await jobSeekerCVLanguageService.delete(jobSeekerCVLanguageId);\n\n    if (result.data.success) {\n      toast.success(result.data.message);\n      getAllByJobSeekerCVId(jobSeekerCV.id);\n    }\n  };\n\n  const initialValues = {\n    language: undefined,\n    level: undefined\n  },\n        validationSchema = Yup.object().shape({\n    language: Yup.object().required(),\n    level: Yup.number().required()\n  });\n  useEffect(() => {\n    getAllByJobSeekerCVId(jobSeekerCV.id);\n    getAllLanguages();\n  }, [getAllByJobSeekerCVId, getAllLanguages, jobSeekerCV.id]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex justify-content-between align-items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Languages\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), !isEditing ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn shadow-none\",\n        onClick: () => toggleEditing(),\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"bi bi-pencil-square\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn shadow-none\",\n        onClick: () => toggleEditing(),\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"bi bi-check-lg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: [jobSeekerCVLanguages.length > 0 ? jobSeekerCVLanguages.map(jobSeekerCVLanguage => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"badge bg-secondary w-100 d-flex justify-content-start align-items-center mb-2 py-3 position-relative shadow\",\n        children: [jobSeekerCVLanguage.language.name, isEditing && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => deleteJobSeekerCVLanguage(jobSeekerCVLanguage.id),\n          className: \"btn bg-transparent shadow-none text-white position-absolute\",\n          style: {\n            right: 0\n          },\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"bi bi-trash-fill\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 17\n        }, this)]\n      }, jobSeekerCVLanguage.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex justify-content-center align-items-center display-1 text-light\",\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"bi bi-text-paragraph\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this), isEditing && /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: initialValues,\n        validationSchema: validationSchema,\n        onSubmit: values => addJobSeekerCVLanguage(values),\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row mt-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm\",\n              children: /*#__PURE__*/_jsxDEV(FormSelect, {\n                name: \"language\",\n                options: languages.map(l => ({\n                  value: l,\n                  label: l.name\n                })),\n                label: false\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm\",\n              children: /*#__PURE__*/_jsxDEV(FormSelect, {\n                name: \"level\",\n                options: [1, 2, 3, 4, 5].map(l => ({\n                  value: l,\n                  label: l.toString()\n                })),\n                label: false,\n                search: false\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"submit\",\n                className: \"btn btn-primary\",\n                children: \"Add\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n\n_s(JobSeekerCVUpdateLanguages, \"P6+qjto0d1Fkvp9MgUElIncH0Ww=\");\n\n_c = JobSeekerCVUpdateLanguages;\n\nvar _c;\n\n$RefreshReg$(_c, \"JobSeekerCVUpdateLanguages\");","map":{"version":3,"sources":["/Users/machiavelli/Desktop/hrms-project-frontend/src/pages/JobSeekers/CV/Update/JobSeekerCVUpdateLanguages.jsx"],"names":["Yup","Form","Formik","React","useCallback","useEffect","useMemo","useState","FormSelect","JobSeekerCVLanguageService","LanguageService","toast","JobSeekerCVUpdateLanguages","jobSeekerCV","jobSeekerCVLanguages","setJobSeekerCVLanguages","languages","setLanguages","isEditing","setIsEditing","toggleEditing","languageService","getAllLanguages","result","getAll","data","jobSeekerCVLanguageService","getAllByJobSeekerCVId","jobSeekerCVId","getAllByJobSeekerCV_Id","success","addJobSeekerCVLanguage","values","newJobSeekerCVLanguage","add","message","id","deleteJobSeekerCVLanguage","jobSeekerCVLanguageId","delete","initialValues","language","undefined","level","validationSchema","object","shape","required","number","length","map","jobSeekerCVLanguage","name","right","l","value","label","toString"],"mappings":"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","sourcesContent":["import * as Yup from \"yup\";\n\nimport { Form, Formik } from \"formik\";\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\n\nimport FormSelect from \"../../../../components/FormSelect/FormSelect\";\nimport JobSeekerCVLanguageService from \"../../../../services/jobSeekerCVLanguageService\";\nimport LanguageService from \"../../../../services/languageService\";\nimport { toast } from \"react-toastify\";\n\nexport default function JobSeekerCVUpdateLanguages({ jobSeekerCV }) {\n  const [jobSeekerCVLanguages, setJobSeekerCVLanguages] = useState([]),\n    [languages, setLanguages] = useState([]),\n    [isEditing, setIsEditing] = useState(false);\n\n  const toggleEditing = () => setIsEditing(!isEditing);\n\n  const languageService = useMemo(() => new LanguageService(), []),\n    getAllLanguages = useCallback(async () => {\n      const result = await languageService.getAll();\n      setLanguages(result.data.data);\n    }, [languageService]);\n\n  const jobSeekerCVLanguageService = useMemo(() => new JobSeekerCVLanguageService(), []),\n    getAllByJobSeekerCVId = useCallback(\n      async (jobSeekerCVId) => {\n        const result = await jobSeekerCVLanguageService.getAllByJobSeekerCV_Id(jobSeekerCVId);\n        if (result.data.success) setJobSeekerCVLanguages(result.data.data);\n      },\n      [jobSeekerCVLanguageService]\n    ),\n    addJobSeekerCVLanguage = async (values) => {\n      const newJobSeekerCVLanguage = {\n        jobSeekerCV,\n        ...values,\n      };\n\n      const result = await jobSeekerCVLanguageService.add(newJobSeekerCVLanguage);\n\n      if (result.data.success) {\n        toast.success(result.data.message);\n        getAllByJobSeekerCVId(jobSeekerCV.id);\n      }\n    },\n    deleteJobSeekerCVLanguage = async (jobSeekerCVLanguageId) => {\n      const result = await jobSeekerCVLanguageService.delete(jobSeekerCVLanguageId);\n      if (result.data.success) {\n        toast.success(result.data.message);\n        getAllByJobSeekerCVId(jobSeekerCV.id);\n      }\n    };\n\n  const initialValues = {\n      language: undefined,\n      level: undefined,\n    },\n    validationSchema = Yup.object().shape({\n      language: Yup.object().required(),\n      level: Yup.number().required(),\n    });\n\n  useEffect(() => {\n    getAllByJobSeekerCVId(jobSeekerCV.id);\n    getAllLanguages();\n  }, [getAllByJobSeekerCVId, getAllLanguages, jobSeekerCV.id]);\n\n  return (\n    <div>\n      <div className='d-flex justify-content-between align-items-center'>\n        <h3>Languages</h3>\n        {!isEditing ? (\n          <button className='btn shadow-none' onClick={() => toggleEditing()}>\n            <i className='bi bi-pencil-square' />\n          </button>\n        ) : (\n          <button type='button' className='btn shadow-none' onClick={() => toggleEditing()}>\n            <i className='bi bi-check-lg' />\n          </button>\n        )}\n      </div>\n      <div className='mb-3'>\n        {jobSeekerCVLanguages.length > 0 ? (\n          jobSeekerCVLanguages.map((jobSeekerCVLanguage) => (\n            <div\n              key={jobSeekerCVLanguage.id}\n              className='badge bg-secondary w-100 d-flex justify-content-start align-items-center mb-2 py-3 position-relative shadow'\n            >\n              {jobSeekerCVLanguage.language.name}\n              {isEditing && (\n                <button\n                  onClick={() => deleteJobSeekerCVLanguage(jobSeekerCVLanguage.id)}\n                  className='btn bg-transparent shadow-none text-white position-absolute'\n                  style={{ right: 0 }}\n                >\n                  <i className='bi bi-trash-fill' />\n                </button>\n              )}\n            </div>\n          ))\n        ) : (\n          <div className='d-flex justify-content-center align-items-center display-1 text-light'>\n            <i className='bi bi-text-paragraph' />\n          </div>\n        )}\n        {isEditing && (\n          <Formik\n            initialValues={initialValues}\n            validationSchema={validationSchema}\n            onSubmit={(values) => addJobSeekerCVLanguage(values)}\n          >\n            <Form>\n              <div className='row mt-3'>\n                <div className='col-sm'>\n                  <FormSelect\n                    name='language'\n                    options={languages.map((l) => ({\n                      value: l,\n                      label: l.name,\n                    }))}\n                    label={false}\n                  />\n                </div>\n                <div className='col-sm'>\n                  <FormSelect\n                    name='level'\n                    options={[1, 2, 3, 4, 5].map((l) => ({\n                      value: l,\n                      label: l.toString(),\n                    }))}\n                    label={false}\n                    search={false}\n                  />\n                </div>\n                <div className='col-sm'>\n                  <button type='submit' className='btn btn-primary'>\n                    Add\n                  </button>\n                </div>\n              </div>\n            </Form>\n          </Formik>\n        )}\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}